// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotesApp.Infrastructure.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotesApp.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NotesApp.Domain.Aggregates.AccountAggregate.Abstracts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.NoteAggregate.Abstract.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.AccountAggregate.Concrete.Admin", b =>
                {
                    b.HasBaseType("NotesApp.Domain.Aggregates.AccountAggregate.Abstracts.Account");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9068738-d4fa-4bac-86b3-2c4dbbe64258"),
                            CreatedAt = new DateTime(2022, 7, 10, 10, 19, 44, 408, DateTimeKind.Utc).AddTicks(6483),
                            IsDeleted = false,
                            PasswordHash = new byte[] { 247, 179, 50, 74, 252, 211, 169, 154, 221, 148, 230, 153, 67, 53, 150, 185, 94, 44, 117, 121, 119, 137, 23, 188, 31, 146, 196, 220, 129, 55, 160, 1, 27, 68, 24, 109, 246, 86, 38, 167, 242, 111, 63, 36, 241, 7, 242, 198, 165, 252, 111, 31, 36, 21, 77, 242, 105, 82, 99, 64, 71, 206, 228, 69 },
                            PasswordSalt = new byte[] { 245, 152, 9, 75, 101, 250, 218, 102, 213, 142, 187, 225, 186, 186, 10, 117, 234, 189, 180, 212, 214, 98, 169, 51, 225, 220, 95, 110, 2, 101, 226, 72, 183, 233, 209, 161, 157, 195, 27, 25, 67, 76, 55, 212, 106, 181, 220, 146, 182, 60, 169, 251, 83, 67, 249, 5, 30, 244, 168, 64, 30, 54, 224, 58, 165, 209, 143, 38, 101, 255, 216, 166, 146, 159, 40, 156, 63, 200, 49, 115, 232, 224, 104, 62, 122, 76, 6, 231, 96, 174, 155, 10, 112, 142, 89, 214, 115, 189, 151, 109, 63, 184, 165, 6, 227, 72, 3, 68, 44, 74, 205, 92, 32, 77, 137, 252, 67, 17, 41, 245, 60, 211, 233, 229, 148, 131, 34, 74 },
                            NickName = "admin"
                        });
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.AccountAggregate.Concrete.StandartUser", b =>
                {
                    b.HasBaseType("NotesApp.Domain.Aggregates.AccountAggregate.Abstracts.Account");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("standartusers", (string)null);
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.NoteAggregate.Concrete.ImageNote", b =>
                {
                    b.HasBaseType("NotesApp.Domain.Aggregates.NoteAggregate.Abstract.Note");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("imagenotes", (string)null);
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.NoteAggregate.Concrete.TextNote", b =>
                {
                    b.HasBaseType("NotesApp.Domain.Aggregates.NoteAggregate.Abstract.Note");

                    b.ToTable("textnotes", (string)null);
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.AccountAggregate.Abstracts.Account", b =>
                {
                    b.OwnsOne("NotesApp.Domain.Aggregates.AccountAggregate.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("AccountId");

                            b1.HasIndex("Value");

                            b1.ToTable("accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");

                            b1.HasData(
                                new
                                {
                                    AccountId = new Guid("c9068738-d4fa-4bac-86b3-2c4dbbe64258"),
                                    Value = "admin@admin.com"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.NoteAggregate.Abstract.Note", b =>
                {
                    b.OwnsMany("NotesApp.Domain.Aggregates.NoteAggregate.ValueObject.Tag", "Tags", b1 =>
                        {
                            b1.Property<Guid>("NoteId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("NoteId", "Id");

                            b1.ToTable("Tag");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.AccountAggregate.Concrete.Admin", b =>
                {
                    b.HasOne("NotesApp.Domain.Aggregates.AccountAggregate.Abstracts.Account", null)
                        .WithOne()
                        .HasForeignKey("NotesApp.Domain.Aggregates.AccountAggregate.Concrete.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.AccountAggregate.Concrete.StandartUser", b =>
                {
                    b.HasOne("NotesApp.Domain.Aggregates.AccountAggregate.Abstracts.Account", null)
                        .WithOne()
                        .HasForeignKey("NotesApp.Domain.Aggregates.AccountAggregate.Concrete.StandartUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.NoteAggregate.Concrete.ImageNote", b =>
                {
                    b.HasOne("NotesApp.Domain.Aggregates.NoteAggregate.Abstract.Note", null)
                        .WithOne()
                        .HasForeignKey("NotesApp.Domain.Aggregates.NoteAggregate.Concrete.ImageNote", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotesApp.Domain.Aggregates.NoteAggregate.Concrete.TextNote", b =>
                {
                    b.HasOne("NotesApp.Domain.Aggregates.NoteAggregate.Abstract.Note", null)
                        .WithOne()
                        .HasForeignKey("NotesApp.Domain.Aggregates.NoteAggregate.Concrete.TextNote", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
